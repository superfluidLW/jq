;
; jinx.ini
;
; This is an example config file which you should customize.
;
; The sections in this file are:
;
;   JAVA    - Java related settings
;   JINX    - Jinx add-in related settings (classes to load and other settings)
;   LOG     - Logging settings (where to log to and what to log)
;   LICENSE - License key
;
; For more information see https://exceljava.com.

[JINX]
; classes:
;
;  List of Java classes to load when Excel starts.
;  Multiple classes can be listed either as a comma
;  delimited list or across multiple indented lines.
;  Jars can also specifiy classes to load by including a
;  'jinx-classes.txt' resource file.
;
classes =
    com.exceljava.jinx.examples.WorksheetFunctions
    com.exceljava.jinx.examples.RibbonFunctions
    com.exceljava.jinx.examples.MacroFunctions
    com.exceljava.jinx.examples.MenuFunctions
    com.exceljava.jinx.examples.RtdFunctions
    com.exceljava.jinx.examples.TypeConverters
    com.chendu.jq.core.excel.XlFunc

; ribbon_xml_resource:
;
;  Resource containing the XML ribbon customizations.
;  To load from a file, use ribbon_xml_file.
;
ribbon_xml_resource = com/exceljava/jinx/examples/ribbon.xml

; ribbon_xml_file:
; Path to XML document containing the XML ribbon customizations.
; Can be used instead of ribbon_xml_resource.
;ribbon_xml_file =

; error_handler:
;
; Can be set to 'none', 'default', 'quiet' or {class name}.
;
; When set to 'none' any exceptions are converted to Excel
; errors (eg #N/A), or when set to 'default' or 'quiet' Java
; exceptions are converted to strings for easier error handling.
;
; If set to 'default' a message box is displayed if an exception
; is thrown when calling a menu or ribbon function.
;
; If set to a class name, then that class should implement
; the Jinx 'ErrorHandler' interface and will be used to
; handle any errors
;
;error_handler = default

; developer_mode:
;
;  Enabled by default. If disabled none of the standard built-in menus
;  will be shown (e.g. reload).
;
;developer_mode = 1

; shadow_path:
;
;  An optional path where any jars from the class path will be copied to.
;  This is so that the original JARs aren't locked by the JVM and can be
;  overwritten before reloading.
;
;  To disable using a shadow path comment out this line.
;
shadow_path = %(APPDATA)s\Jinx\shadow_jars

; auto_reload:
;
;  If set, reload automatically whenever any of the jar, config or class
;  files are modified.
;
auto_reload = 0

; auto_reload_delay:
;
;  Number of seconds to wait between detecting a modified file and reloading
;  the Jinx add-in. If another file is modified in this time, the delay is
;  restarted. This enables changes to .class files to trigger a reload without
;  reloading before all the recompiled files are ready. If it takes a long
;  time to build your project you may need to increase this.
;
;auto_reload_delay = 1

; reload_exclude:
;
;  Class to exclude from class reloading.
;  Some classes do not reload cleanly and reloading them causes problems.
;
;  For example, if static state is maintained in a native library then
;  reloading the Java classes may not work correctly.
;
reload_exclude =
    com.microsoft.sqlserver.jdbc.*
    microsoft.sql.*
    mssql.*
    com4j.*

; reload_include:
;
;  Instead of setting reload_exclude, reload_include can be used to control
;  the classes that should be reloaded. When set, everything else will be
;  excluded from reloading.
;
;reload_include =

[JAVA]
; classpath:
;
;  The Java classpath is set as multiple indented lines (one per path) or
;  a semi-colon delimited list of paths. '*' may be used as a wildcard.
;
;  Classes and resources may be loaded from both JAR files and directories.
;
classpath =
    ./jinx-examples/target/*.jar
    ../jq_core/target/*.jar

; java_home:
;
;  Can be set to specify the Java runtime to use.
;
;  If you are using a 64 bit version of Excel you must also use
;  a 64 bit Java runtime, or if you are using a 32 bit version of
;  Excel then you just use a 32 bit Java runtime.
;
;java_home = C:\Program Files (x86)\Java\jre1.8.0_211

; java_opts:
;
;  Java options to be set when Java is initialized.
;
java_opts =
;    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
;    -Xms64m
;    -Xmx64m

; jni_version:
;
;  Use to specify the JNI version.
;  It is not usually necessary to set this.
;  Defaults to 1.6.
;
;jni_version = 1.6


[LOG]
; level:
;
;  Detail of logging to include. May be set to any of:
;  - severe
;  - warning
;  - info
;  - config
;  - fine
;  - finer
;  - finest
;
level = fine

; format:
;
;  Format to be used when logging.
;  See the documentation for all formatting options.
;
format = %(asctime)s - %(levelname)s : %(message)s

; path:
;
;  Path to write log files to.
;  This may be relative to this config file.
;
path = ./logs

; file:
;
;  Filename of the log file.
;  This may include the additional substitution variables:
;    - date (current date in YYYYMMDD format)
;    - pid (process id)
;    - xlversion (xl version)
;
file = jinx.%(date)s.log
